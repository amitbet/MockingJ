
Todo list:

    ☐ @high (replay - closing) implement closing steps - run when running close session/scenario.
    ☐ @high (recorder) - save strings larger than 1000 chars to file, and add a readfileSync call instead of the content (it's messing up the recorder output)  
    ☐ @high (recorder) - debug recorder, see that actions are saved under correct conditions in created steps.
    ✔ @high (replay) - check match for scenario start @done (10/14/2016, 10:46:22 AM)
    ✔ @high (replay) - create a util class with sequence/fs.read/fs.write/generateDataWithType/getSession etc. (for inline json js) @done (10/14/2016, 10:46:27 AM)
    ☐ @high (replayXTimes) - test multiple sequential replays (fix so it would not require closing)
    ☐ @high (replayMulti) - think of creating a mutliple run step for registering many times (sequence in the util class should help take sequential ports).
    ☐ @high (replayMulti) - think of more than one session per process - it should work just by registering multiple times with different ports (emulate multiple remote agents per MockService instance)

Low:
    ☐ @low (replay - queue) test rabbitMQ listener & responder.
    ☐ @low (replay) add context to the eval in steps, that can be fed information from the listener (or just append stuff to the req variable)
    ☐ @low (R&R - closing) add a disconnect step for ws/ queue / close session for http, in both replay and record
    ☐ @low (recorder) think of refactoring the recorder to be similar to the mock service
    ☐ @low (recorder) create a queue message recorder for rabbitMQ messages
    ☐ @low (recorder) add delay calculations
    ☐ @low (recorder - closing) add ws close connection step recording
    ☐ @low (replay - polling/heartbeat) inplement interval steps, that are run as recurring tasks (emulate polling)
    ✔ @low think of returning or removing weight in scenario choice alg. @done (10/14/2016, 11:07:17 AM)

Done:
    ✔ (main mock service) Think of session end behaviour, should we rechoose and get another scenario / should we stay with the fallback steps / close the ws conn? @done (10/8/2016, 10:30:30 AM)
    ✔ Think of scenario choice for mock replay, should it be according to protocol type? (matching might take care of that, should we choose by message matching and not only lottery?) @done (10/8/2016, 10:30:31 AM)
    ✔ (mock http server) Create session exractor for HTTP: Setting the sessionId to be the same as socketId is bad - since it limits the scenario length to one (req->response), we should have some extrction routine to find the session in Http headers / url / cookie @done (10/6/2016, 6:36:10 AM)
    ✔ (recorder) complete the recorder by mapping "uid" and req/res & processing the messages into a scenario-repo, then saving it. @done (10/4/2016, 1:24:31 AM)
    ✔ (replay) add a place for initial actions on server run @done (10/8/2016, 5:04:02 PM)
    ✔ (replay) test http client responder @done (10/8/2016, 5:03:46 PM)
    ✔ (replay) add match step logic by protocol type, do the same for scenario choice by the type of the first step in scenario (collect scenarios matching first step before running lottery). @done (9.10.2016, 18:01:52)
    